# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'inspec/resource'
class Images < Inspec.resource(1)

  name 'google_compute_images'
  desc 'Image plural resource'
  supports platform: 'gcp2'

  filter_table_config = FilterTable.create

  filter_table_config.add(:archive_size_bytes, field: :archive_size_bytes)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:deprecateds, field: :deprecated)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:disk_size_gbs, field: :disk_size_gb)
  filter_table_config.add(:families, field: :family)
  filter_table_config.add(:guest_os_features, field: :guest_os_features)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:image_encryption_keys, field: :image_encryption_key)
  filter_table_config.add(:licenses, field: :licenses)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:raw_disks, field: :raw_disk)
  filter_table_config.add(:source_disks, field: :source_disk)
  filter_table_config.add(:source_disk_encryption_keys, field: :source_disk_encryption_key)
  filter_table_config.add(:source_disk_ids, field: :source_disk_id)
  filter_table_config.add(:source_types, field: :source_type)

  filter_table_config.connect(self, :fetch_data)

  def base
    'https://www.googleapis.com/compute/v1/'
  end

  def url
    'projects/{{project}}/global/images'
  end

  def initialize(params = {}) 
    @params = params
  end

  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
  end

  def fetch_data
  	@data = fetch_wrapped_resource('compute#imageList', 'items')
  end

  def fetch_wrapped_resource(wrap_kind, wrap_path)
    result = fetch_resource(@params)
    return if result.nil? || !result.key?(wrap_path)

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result[wrap_path].each do |hash|
      hash_with_symbols = {}
      hash.each_pair { |k, v| hash_with_symbols[k.to_sym] = v }
      converted.push(hash_with_symbols)
    end

    converted
  end

end
