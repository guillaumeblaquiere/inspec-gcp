# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/container/property/regionalcluster_addons_config'
require 'google/container/property/regionalcluster_addons_config_horizontal_pod_autoscaling'
require 'google/container/property/regionalcluster_addons_config_http_load_balancing'
require 'google/container/property/regionalcluster_master_auth'
require 'google/container/property/regionalcluster_node_config'
require 'google/container/property/regionalcluster_private_cluster_config'

# A provider to manage Google Kubernetes Engine resources.
class RegionalCluster < GcpResourceBase
  name 'google_container_regional_cluster'
  desc 'RegionalCluster'
  supports platform: 'gcp'

  attr_reader :params
  attr_reader :name
  attr_reader :description
  attr_reader :initial_node_count
  attr_reader :node_config
  attr_reader :master_auth
  attr_reader :logging_service
  attr_reader :monitoring_service
  attr_reader :network
  attr_reader :private_cluster_config
  attr_reader :cluster_ipv4_cidr
  attr_reader :addons_config
  attr_reader :subnetwork
  attr_reader :endpoint
  attr_reader :initial_cluster_version
  attr_reader :current_master_version
  attr_reader :current_node_version
  attr_reader :create_time
  attr_reader :node_ipv4_cidr_size
  attr_reader :services_ipv4_cidr
  attr_reader :current_node_count
  attr_reader :expire_time
  attr_reader :location

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url, resource_base_url, params)
    parse unless @fetched.nil?
  end

  def parse
    @name = @fetched['name']
    @description = @fetched['description']
    @initial_node_count = @fetched['initialNodeCount']
    @node_config = GoogleInSpec::Container::Property::RegionalClusterNodeConfig.new(@fetched['nodeConfig'], to_s)
    @master_auth = GoogleInSpec::Container::Property::RegionalClusterMasterAuth.new(@fetched['masterAuth'], to_s)
    @logging_service = @fetched['loggingService']
    @monitoring_service = @fetched['monitoringService']
    @network = @fetched['network']
    @private_cluster_config = GoogleInSpec::Container::Property::RegionalClusterPrivateClusterConfig.new(@fetched['privateClusterConfig'], to_s)
    @cluster_ipv4_cidr = @fetched['clusterIpv4Cidr']
    @addons_config = GoogleInSpec::Container::Property::RegionalClusterAddonsConfig.new(@fetched['addonsConfig'], to_s)
    @subnetwork = @fetched['subnetwork']
    @endpoint = @fetched['endpoint']
    @initial_cluster_version = @fetched['initialClusterVersion']
    @current_master_version = @fetched['currentMasterVersion']
    @current_node_version = @fetched['currentNodeVersion']
    @create_time = parse_time_string(@fetched['createTime'])
    @node_ipv4_cidr_size = @fetched['nodeIpv4CidrSize']
    @services_ipv4_cidr = @fetched['servicesIpv4Cidr']
    @current_node_count = @fetched['currentNodeCount']
    @expire_time = parse_time_string(@fetched['expireTime'])
    @location = @fetched['location']
  end

  # Handles parsing RFC3339 time string
  def parse_time_string(time_string)
    time_string ? Time.parse(time_string) : nil
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "RegionalCluster #{@params[:name]}"
  end

  private

  def product_url
    'https://container.googleapis.com/v1/'
  end

  def resource_base_url
    'projects/{{project}}/locations/{{location}}/clusters/{{name}}'
  end
end
