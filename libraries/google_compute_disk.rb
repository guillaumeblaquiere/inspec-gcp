# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'

# A provider to manage Google Compute Engine resources.
class Disk < GcpResourceBase
  name 'google_compute_disk'
  desc 'Disk'
  supports platform: 'gcp'

  attr_reader :label_fingerprint
  attr_reader :creation_timestamp
  attr_reader :description
  attr_reader :id
  attr_reader :last_attach_timestamp
  attr_reader :last_detach_timestamp
  attr_reader :labels
  attr_reader :licenses
  attr_reader :name
  attr_reader :size_gb
  attr_reader :users
  attr_reader :type
  attr_reader :source_image
  def base
    'https://www.googleapis.com/compute/v1/'
  end

  def url
    'projects/{{project}}/zones/{{zone}}/disks/{{name}}'
  end

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @fetched = @connection.fetch(base, url, params)
    parse unless @fetched.nil?
  end

  def parse
    @label_fingerprint = @fetched['labelFingerprint']
    @creation_timestamp = @fetched['creationTimestamp'].nil? ? Time.parse(@fetched['creationTimestamp']) : nil
    @description = @fetched['description']
    @id = @fetched['id']
    @last_attach_timestamp = @fetched['lastAttachTimestamp'].nil? ? Time.parse(@fetched['lastAttachTimestamp']) : nil
    @last_detach_timestamp = @fetched['lastDetachTimestamp'].nil? ? Time.parse(@fetched['lastDetachTimestamp']) : nil
    @labels = @fetched['labels']
    @licenses = @fetched['licenses']
    @name = @fetched['name']
    @size_gb = @fetched['sizeGb']
    @users = @fetched['users']
    @type = @fetched['type']
    @source_image = @fetched['sourceImage']
  end

  def exists?
    !@fetched.nil?
  end
end
