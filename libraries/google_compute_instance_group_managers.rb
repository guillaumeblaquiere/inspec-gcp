# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class InstanceGroupManagers < GcpResourceBase
  name 'google_compute_instance_group_managers'
  desc 'InstanceGroupManager plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:base_instance_names, field: :baseInstanceName)
  filter_table_config.add(:creation_timestamps, field: :creationTimestamp)
  filter_table_config.add(:current_actions, field: :currentActions)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:instance_groups, field: :instanceGroup)
  filter_table_config.add(:instance_templates, field: :instanceTemplate)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:named_ports, field: :namedPorts)
  filter_table_config.add(:regions, field: :region)
  filter_table_config.add(:target_pools, field: :targetPools)
  filter_table_config.add(:target_sizes, field: :targetSize)
  filter_table_config.add(:zones, field: :zone)

  filter_table_config.connect(self, :table)

  def base
    'https://www.googleapis.com/compute/v1/'
  end

  def url
    'projects/{{project}}/zones/{{zone}}/instanceGroupManagers'
  end

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('items')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(base, url, @params)
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_pair { |k, v| hash_with_symbols[k.to_sym] = v }
        converted.push(hash_with_symbols)
      end
    end

    converted
  end
end
