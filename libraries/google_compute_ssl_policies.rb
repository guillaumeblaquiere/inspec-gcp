# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'gcp_backend'
class SslPolicys < GcpResourceBase

  name 'google_compute_ssl_policies'
  desc 'SslPolicy plural resource'
  supports platform: 'gcp'

  filter_table_config = FilterTable.create

  filter_table_config.add(:creation_timestamps, field: :creationTimestamp)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:profiles, field: :profile)
  filter_table_config.add(:min_tls_versions, field: :minTlsVersion)
  filter_table_config.add(:enabled_features, field: :enabledFeatures)
  filter_table_config.add(:custom_features, field: :customFeatures)
  filter_table_config.add(:fingerprints, field: :fingerprint)
  filter_table_config.add(:warnings, field: :warnings)

  filter_table_config.connect(self, :table)

  def base
    'https://www.googleapis.com/compute/v1/'
  end

  def url
    'projects/{{project}}/global/sslPolicies'
  end

  def initialize(params = {})
    super(params.merge({:use_http_transport => true}))
    @params = params
    @table = fetch_wrapped_resource('compute#sslPoliciesList', 'items')
  end

  def table
    @table
  end

  def fetch_wrapped_resource(wrap_kind, wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(base, url, @params)
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      return if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_pair { |k, v| hash_with_symbols[k.to_sym] = v }
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

end
