# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'inspec/resource'
class Instances < Inspec.resource(1)

  name 'google_compute_instances'
  desc 'Instance plural resource'
  supports platform: 'gcp2'

  filter_table_config = FilterTable.create

  filter_table_config.add(:can_ip_forwards, field: :can_ip_forward)
  filter_table_config.add(:cpu_platforms, field: :cpu_platform)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:disks, field: :disks)
  filter_table_config.add(:guest_accelerators, field: :guest_accelerators)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:label_fingerprints, field: :label_fingerprint)
  filter_table_config.add(:metadata, field: :metadata)
  filter_table_config.add(:machine_types, field: :machine_type)
  filter_table_config.add(:min_cpu_platforms, field: :min_cpu_platform)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:network_interfaces, field: :network_interfaces)
  filter_table_config.add(:schedulings, field: :scheduling)
  filter_table_config.add(:service_accounts, field: :service_accounts)
  filter_table_config.add(:statuses, field: :status)
  filter_table_config.add(:status_messages, field: :status_message)
  filter_table_config.add(:tags, field: :tags)
  filter_table_config.add(:zones, field: :zone)

  filter_table_config.connect(self, :fetch_data)

  def base
    'https://www.googleapis.com/compute/v1/'
  end

  def url
    'projects/{{project}}/zones/{{zone}}/instances'
  end

  def initialize(params = {}) 
    @params = params
  end

  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
  end

  def fetch_data
  	@data = fetch_wrapped_resource('compute#instanceList', 'items')
  end

  def fetch_wrapped_resource(wrap_kind, wrap_path)
    result = fetch_resource(@params)
    return if result.nil? || !result.key?(wrap_path)

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result[wrap_path].each do |hash|
      hash_with_symbols = {}
      hash.each_pair { |k, v| hash_with_symbols[k.to_sym] = v }
      converted.push(hash_with_symbols)
    end

    converted
  end

end
